/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * the sending results for a single recipient
 */
@JsonPropertyOrder({
  PostMessagesSendTemplate200ResponseInner.JSON_PROPERTY_EMAIL,
  PostMessagesSendTemplate200ResponseInner.JSON_PROPERTY_STATUS,
  PostMessagesSendTemplate200ResponseInner.JSON_PROPERTY_REJECT_REASON,
  PostMessagesSendTemplate200ResponseInner.JSON_PROPERTY_QUEUED_REASON,
  PostMessagesSendTemplate200ResponseInner.JSON_PROPERTY_ID
})
@JsonTypeName("postMessagesSendTemplate_200_response_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T14:58:48.420021+02:00[Europe/Tallinn]")
public class PostMessagesSendTemplate200ResponseInner {
  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  /**
   * the sending status of the recipient
   */
  public enum StatusEnum {
    SENT("sent"),
    
    QUEUED("queued"),
    
    REJECTED("rejected"),
    
    INVALID("invalid");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * the reason for the rejection if the recipient status is \&quot;rejected\&quot;
   */
  public enum RejectReasonEnum {
    HARD_BOUNCE("hard-bounce"),
    
    SOFT_BOUNCE("soft-bounce"),
    
    SPAM("spam"),
    
    UNSUB("unsub"),
    
    CUSTOM("custom"),
    
    INVALID_SENDER("invalid-sender"),
    
    INVALID("invalid"),
    
    TEST_MODE_LIMIT("test-mode-limit"),
    
    UNSIGNED("unsigned"),
    
    RULE("rule");

    private String value;

    RejectReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RejectReasonEnum fromValue(String value) {
      for (RejectReasonEnum b : RejectReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REJECT_REASON = "reject_reason";
  private RejectReasonEnum rejectReason;

  /**
   * the reason for the email being queued if the response status is \&quot;queued\&quot;
   */
  public enum QueuedReasonEnum {
    ATTACHMENTS("attachments"),
    
    MULTIPLE_RECIPIENTS("multiple-recipients"),
    
    FREE_TRIAL_SENDS_EXHAUSTED("free-trial-sends-exhausted"),
    
    HOURLY_QUOTA_EXHAUSTED("hourly-quota-exhausted"),
    
    MONTHLY_LIMIT_REACHED("monthly-limit-reached"),
    
    SENDING_PAUSED("sending-paused"),
    
    SENDING_SUSPENDED("sending-suspended"),
    
    ACCOUNT_SUSPENDED("account-suspended"),
    
    SENDING_BACKLOGGED("sending-backlogged");

    private String value;

    QueuedReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QueuedReasonEnum fromValue(String value) {
      for (QueuedReasonEnum b : QueuedReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_QUEUED_REASON = "queued_reason";
  private QueuedReasonEnum queuedReason;

  public static final String JSON_PROPERTY_ID = "_id";
  private String id;

  public PostMessagesSendTemplate200ResponseInner() {
  }

  public PostMessagesSendTemplate200ResponseInner email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * the email address of the recipient
   * @return email
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(String email) {
    this.email = email;
  }


  public PostMessagesSendTemplate200ResponseInner status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * the sending status of the recipient
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PostMessagesSendTemplate200ResponseInner rejectReason(RejectReasonEnum rejectReason) {
    
    this.rejectReason = rejectReason;
    return this;
  }

   /**
   * the reason for the rejection if the recipient status is \&quot;rejected\&quot;
   * @return rejectReason
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REJECT_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RejectReasonEnum getRejectReason() {
    return rejectReason;
  }


  @JsonProperty(JSON_PROPERTY_REJECT_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRejectReason(RejectReasonEnum rejectReason) {
    this.rejectReason = rejectReason;
  }


  public PostMessagesSendTemplate200ResponseInner queuedReason(QueuedReasonEnum queuedReason) {
    
    this.queuedReason = queuedReason;
    return this;
  }

   /**
   * the reason for the email being queued if the response status is \&quot;queued\&quot;
   * @return queuedReason
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUEUED_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QueuedReasonEnum getQueuedReason() {
    return queuedReason;
  }


  @JsonProperty(JSON_PROPERTY_QUEUED_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueuedReason(QueuedReasonEnum queuedReason) {
    this.queuedReason = queuedReason;
  }


  public PostMessagesSendTemplate200ResponseInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * the message&#39;s unique id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMessagesSendTemplate200ResponseInner postMessagesSendTemplate200ResponseInner = (PostMessagesSendTemplate200ResponseInner) o;
    return Objects.equals(this.email, postMessagesSendTemplate200ResponseInner.email) &&
        Objects.equals(this.status, postMessagesSendTemplate200ResponseInner.status) &&
        Objects.equals(this.rejectReason, postMessagesSendTemplate200ResponseInner.rejectReason) &&
        Objects.equals(this.queuedReason, postMessagesSendTemplate200ResponseInner.queuedReason) &&
        Objects.equals(this.id, postMessagesSendTemplate200ResponseInner.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, status, rejectReason, queuedReason, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMessagesSendTemplate200ResponseInner {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    rejectReason: ").append(toIndentedString(rejectReason)).append("\n");
    sb.append("    queuedReason: ").append(toIndentedString(queuedReason)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

