/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.model.PostMessagesParse200ResponseAttachmentsInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesParse200ResponseImagesInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesParse200ResponseToInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * the parsed message
 */
@JsonPropertyOrder({
  PostMessagesParse200Response.JSON_PROPERTY_SUBJECT,
  PostMessagesParse200Response.JSON_PROPERTY_FROM_EMAIL,
  PostMessagesParse200Response.JSON_PROPERTY_FROM_NAME,
  PostMessagesParse200Response.JSON_PROPERTY_TO,
  PostMessagesParse200Response.JSON_PROPERTY_HEADERS,
  PostMessagesParse200Response.JSON_PROPERTY_TEXT,
  PostMessagesParse200Response.JSON_PROPERTY_HTML,
  PostMessagesParse200Response.JSON_PROPERTY_ATTACHMENTS,
  PostMessagesParse200Response.JSON_PROPERTY_IMAGES
})
@JsonTypeName("postMessagesParse_200_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T14:58:48.420021+02:00[Europe/Tallinn]")
public class PostMessagesParse200Response {
  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_FROM_EMAIL = "from_email";
  private String fromEmail;

  public static final String JSON_PROPERTY_FROM_NAME = "from_name";
  private String fromName;

  public static final String JSON_PROPERTY_TO = "to";
  private List<PostMessagesParse200ResponseToInner> to;

  public static final String JSON_PROPERTY_HEADERS = "headers";
  private Object headers;

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public static final String JSON_PROPERTY_HTML = "html";
  private String html;

  public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
  private List<PostMessagesParse200ResponseAttachmentsInner> attachments;

  public static final String JSON_PROPERTY_IMAGES = "images";
  private List<PostMessagesParse200ResponseImagesInner> images;

  public PostMessagesParse200Response() {
  }

  public PostMessagesParse200Response subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * the subject of the message
   * @return subject
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public PostMessagesParse200Response fromEmail(String fromEmail) {
    
    this.fromEmail = fromEmail;
    return this;
  }

   /**
   * the email address of the sender
   * @return fromEmail
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromEmail() {
    return fromEmail;
  }


  @JsonProperty(JSON_PROPERTY_FROM_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
  }


  public PostMessagesParse200Response fromName(String fromName) {
    
    this.fromName = fromName;
    return this;
  }

   /**
   * the alias of the sender (if any)
   * @return fromName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromName() {
    return fromName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public PostMessagesParse200Response to(List<PostMessagesParse200ResponseToInner> to) {
    
    this.to = to;
    return this;
  }

  public PostMessagesParse200Response addToItem(PostMessagesParse200ResponseToInner toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * an array of any recipients in the message
   * @return to
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PostMessagesParse200ResponseToInner> getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(List<PostMessagesParse200ResponseToInner> to) {
    this.to = to;
  }


  public PostMessagesParse200Response headers(Object headers) {
    
    this.headers = headers;
    return this;
  }

   /**
   * the key-value pairs of the MIME headers for the message&#39;s main document
   * @return headers
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getHeaders() {
    return headers;
  }


  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeaders(Object headers) {
    this.headers = headers;
  }


  public PostMessagesParse200Response text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * the text part of the message, if any
   * @return text
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
  }


  public PostMessagesParse200Response html(String html) {
    
    this.html = html;
    return this;
  }

   /**
   * the HTML part of the message, if any
   * @return html
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtml() {
    return html;
  }


  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtml(String html) {
    this.html = html;
  }


  public PostMessagesParse200Response attachments(List<PostMessagesParse200ResponseAttachmentsInner> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public PostMessagesParse200Response addAttachmentsItem(PostMessagesParse200ResponseAttachmentsInner attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * an array of any attachments that can be found in the message
   * @return attachments
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PostMessagesParse200ResponseAttachmentsInner> getAttachments() {
    return attachments;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachments(List<PostMessagesParse200ResponseAttachmentsInner> attachments) {
    this.attachments = attachments;
  }


  public PostMessagesParse200Response images(List<PostMessagesParse200ResponseImagesInner> images) {
    
    this.images = images;
    return this;
  }

  public PostMessagesParse200Response addImagesItem(PostMessagesParse200ResponseImagesInner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * an array of any embedded images that can be found in the message
   * @return images
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PostMessagesParse200ResponseImagesInner> getImages() {
    return images;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImages(List<PostMessagesParse200ResponseImagesInner> images) {
    this.images = images;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMessagesParse200Response postMessagesParse200Response = (PostMessagesParse200Response) o;
    return Objects.equals(this.subject, postMessagesParse200Response.subject) &&
        Objects.equals(this.fromEmail, postMessagesParse200Response.fromEmail) &&
        Objects.equals(this.fromName, postMessagesParse200Response.fromName) &&
        Objects.equals(this.to, postMessagesParse200Response.to) &&
        Objects.equals(this.headers, postMessagesParse200Response.headers) &&
        Objects.equals(this.text, postMessagesParse200Response.text) &&
        Objects.equals(this.html, postMessagesParse200Response.html) &&
        Objects.equals(this.attachments, postMessagesParse200Response.attachments) &&
        Objects.equals(this.images, postMessagesParse200Response.images);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, fromEmail, fromName, to, headers, text, html, attachments, images);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMessagesParse200Response {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

