/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendRequestMessage;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostMessagesSendRequest
 */
@JsonPropertyOrder({
  PostMessagesSendRequest.JSON_PROPERTY_KEY,
  PostMessagesSendRequest.JSON_PROPERTY_MESSAGE,
  PostMessagesSendRequest.JSON_PROPERTY_ASYNC,
  PostMessagesSendRequest.JSON_PROPERTY_IP_POOL,
  PostMessagesSendRequest.JSON_PROPERTY_SEND_AT
})
@JsonTypeName("postMessagesSend_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T14:58:48.420021+02:00[Europe/Tallinn]")
public class PostMessagesSendRequest {
  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private PostMessagesSendRequestMessage message;

  public static final String JSON_PROPERTY_ASYNC = "async";
  private Boolean async;

  public static final String JSON_PROPERTY_IP_POOL = "ip_pool";
  private String ipPool;

  public static final String JSON_PROPERTY_SEND_AT = "send_at";
  private OffsetDateTime sendAt;

  public PostMessagesSendRequest() {
  }

  public PostMessagesSendRequest key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * a valid api key
   * @return key
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(String key) {
    this.key = key;
  }


  public PostMessagesSendRequest message(PostMessagesSendRequestMessage message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PostMessagesSendRequestMessage getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(PostMessagesSendRequestMessage message) {
    this.message = message;
  }


  public PostMessagesSendRequest async(Boolean async) {
    
    this.async = async;
    return this;
  }

   /**
   * enable a background sending mode that is optimized for bulk sending. In async mode, messages/send will immediately return a status of \&quot;queued\&quot; for every recipient. To handle rejections when sending in async mode, set up a webhook for the &#39;reject&#39; event. Defaults to false for messages with no more than 10 recipients; messages with more than 10 recipients are always sent asynchronously, regardless of the value of async.
   * @return async
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAsync() {
    return async;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsync(Boolean async) {
    this.async = async;
  }


  public PostMessagesSendRequest ipPool(String ipPool) {
    
    this.ipPool = ipPool;
    return this;
  }

   /**
   * the name of the dedicated ip pool that should be used to send the message. If you do not have any dedicated IPs, this parameter has no effect. If you specify a pool that does not exist, your default pool will be used instead.
   * @return ipPool
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IP_POOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIpPool() {
    return ipPool;
  }


  @JsonProperty(JSON_PROPERTY_IP_POOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpPool(String ipPool) {
    this.ipPool = ipPool;
  }


  public PostMessagesSendRequest sendAt(OffsetDateTime sendAt) {
    
    this.sendAt = sendAt;
    return this;
  }

   /**
   * when this message should be sent as a UTC timestamp in YYYY-MM-DD HH:MM:SS format. If you specify a time in the past, the message will be sent immediately; for future dates, you&#39;re limited to one year from the date of scheduling.
   * @return sendAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getSendAt() {
    return sendAt;
  }


  @JsonProperty(JSON_PROPERTY_SEND_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendAt(OffsetDateTime sendAt) {
    this.sendAt = sendAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMessagesSendRequest postMessagesSendRequest = (PostMessagesSendRequest) o;
    return Objects.equals(this.key, postMessagesSendRequest.key) &&
        Objects.equals(this.message, postMessagesSendRequest.message) &&
        Objects.equals(this.async, postMessagesSendRequest.async) &&
        Objects.equals(this.ipPool, postMessagesSendRequest.ipPool) &&
        Objects.equals(this.sendAt, postMessagesSendRequest.sendAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, message, async, ipPool, sendAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMessagesSendRequest {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    async: ").append(toIndentedString(async)).append("\n");
    sb.append("    ipPool: ").append(toIndentedString(ipPool)).append("\n");
    sb.append("    sendAt: ").append(toIndentedString(sendAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

