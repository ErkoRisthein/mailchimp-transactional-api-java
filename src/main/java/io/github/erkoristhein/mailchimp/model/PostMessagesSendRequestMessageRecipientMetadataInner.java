/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendRequestMessageRecipientMetadataInnerValues;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * metadata for a single recipient
 */
@JsonPropertyOrder({
  PostMessagesSendRequestMessageRecipientMetadataInner.JSON_PROPERTY_RCPT,
  PostMessagesSendRequestMessageRecipientMetadataInner.JSON_PROPERTY_VALUES
})
@JsonTypeName("postMessagesSend_request_message_recipient_metadata_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T14:58:48.420021+02:00[Europe/Tallinn]")
public class PostMessagesSendRequestMessageRecipientMetadataInner {
  public static final String JSON_PROPERTY_RCPT = "rcpt";
  private String rcpt;

  public static final String JSON_PROPERTY_VALUES = "values";
  private PostMessagesSendRequestMessageRecipientMetadataInnerValues values;

  public PostMessagesSendRequestMessageRecipientMetadataInner() {
  }

  public PostMessagesSendRequestMessageRecipientMetadataInner rcpt(String rcpt) {
    
    this.rcpt = rcpt;
    return this;
  }

   /**
   * the email address of the recipient that the metadata is associated with
   * @return rcpt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RCPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRcpt() {
    return rcpt;
  }


  @JsonProperty(JSON_PROPERTY_RCPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRcpt(String rcpt) {
    this.rcpt = rcpt;
  }


  public PostMessagesSendRequestMessageRecipientMetadataInner values(PostMessagesSendRequestMessageRecipientMetadataInnerValues values) {
    
    this.values = values;
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostMessagesSendRequestMessageRecipientMetadataInnerValues getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(PostMessagesSendRequestMessageRecipientMetadataInnerValues values) {
    this.values = values;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMessagesSendRequestMessageRecipientMetadataInner postMessagesSendRequestMessageRecipientMetadataInner = (PostMessagesSendRequestMessageRecipientMetadataInner) o;
    return Objects.equals(this.rcpt, postMessagesSendRequestMessageRecipientMetadataInner.rcpt) &&
        Objects.equals(this.values, postMessagesSendRequestMessageRecipientMetadataInner.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rcpt, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMessagesSendRequestMessageRecipientMetadataInner {\n");
    sb.append("    rcpt: ").append(toIndentedString(rcpt)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

