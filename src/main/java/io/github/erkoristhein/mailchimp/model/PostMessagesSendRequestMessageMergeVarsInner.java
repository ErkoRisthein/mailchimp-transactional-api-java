/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendRequestMessageMergeVarsInnerVarsInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * per-recipient merge variables
 */
@JsonPropertyOrder({
  PostMessagesSendRequestMessageMergeVarsInner.JSON_PROPERTY_RCPT,
  PostMessagesSendRequestMessageMergeVarsInner.JSON_PROPERTY_VARS
})
@JsonTypeName("postMessagesSend_request_message_merge_vars_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T14:58:48.420021+02:00[Europe/Tallinn]")
public class PostMessagesSendRequestMessageMergeVarsInner {
  public static final String JSON_PROPERTY_RCPT = "rcpt";
  private String rcpt;

  public static final String JSON_PROPERTY_VARS = "vars";
  private List<PostMessagesSendRequestMessageMergeVarsInnerVarsInner> vars;

  public PostMessagesSendRequestMessageMergeVarsInner() {
  }

  public PostMessagesSendRequestMessageMergeVarsInner rcpt(String rcpt) {
    
    this.rcpt = rcpt;
    return this;
  }

   /**
   * the email address of the recipient that the merge variables should apply to
   * @return rcpt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RCPT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRcpt() {
    return rcpt;
  }


  @JsonProperty(JSON_PROPERTY_RCPT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRcpt(String rcpt) {
    this.rcpt = rcpt;
  }


  public PostMessagesSendRequestMessageMergeVarsInner vars(List<PostMessagesSendRequestMessageMergeVarsInnerVarsInner> vars) {
    
    this.vars = vars;
    return this;
  }

  public PostMessagesSendRequestMessageMergeVarsInner addVarsItem(PostMessagesSendRequestMessageMergeVarsInnerVarsInner varsItem) {
    if (this.vars == null) {
      this.vars = new ArrayList<>();
    }
    this.vars.add(varsItem);
    return this;
  }

   /**
   * the recipient&#39;s merge variables
   * @return vars
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PostMessagesSendRequestMessageMergeVarsInnerVarsInner> getVars() {
    return vars;
  }


  @JsonProperty(JSON_PROPERTY_VARS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVars(List<PostMessagesSendRequestMessageMergeVarsInnerVarsInner> vars) {
    this.vars = vars;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMessagesSendRequestMessageMergeVarsInner postMessagesSendRequestMessageMergeVarsInner = (PostMessagesSendRequestMessageMergeVarsInner) o;
    return Objects.equals(this.rcpt, postMessagesSendRequestMessageMergeVarsInner.rcpt) &&
        Objects.equals(this.vars, postMessagesSendRequestMessageMergeVarsInner.vars);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rcpt, vars);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMessagesSendRequestMessageMergeVarsInner {\n");
    sb.append("    rcpt: ").append(toIndentedString(rcpt)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

