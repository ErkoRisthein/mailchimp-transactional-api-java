/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.api;

import io.github.erkoristhein.mailchimp.model.PostMessagesCancelScheduledRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesContent200Response;
import io.github.erkoristhein.mailchimp.model.PostMessagesInfo200Response;
import io.github.erkoristhein.mailchimp.model.PostMessagesInfoRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesListScheduled200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesListScheduledRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesParse200Response;
import io.github.erkoristhein.mailchimp.model.PostMessagesParseRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesRescheduleRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesSearch200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesSearchRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesSearchTimeSeries200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesSearchTimeSeriesRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesSend200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendRawRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendRequest;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendTemplate200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostMessagesSendTemplateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Ignore
public class MessagesApiTest {

    private final MessagesApi api = new MessagesApi();

    
    /**
     * Cancel scheduled email
     *
     * Cancels a scheduled email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesCancelScheduledTest() {
        PostMessagesCancelScheduledRequest body = null;

        List<PostMessagesListScheduled200ResponseInner> response = api.postMessagesCancelScheduled(body);

        // TODO: test validations
    }
    
    /**
     * Get message content
     *
     * Get the full content of a recently sent message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesContentTest() {
        PostMessagesInfoRequest body = null;

        PostMessagesContent200Response response = api.postMessagesContent(body);

        // TODO: test validations
    }
    
    /**
     * Get message info
     *
     * Get the information for a single recently sent message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesInfoTest() {
        PostMessagesInfoRequest body = null;

        PostMessagesInfo200Response response = api.postMessagesInfo(body);

        // TODO: test validations
    }
    
    /**
     * List scheduled emails
     *
     * Queries your scheduled emails.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesListScheduledTest() {
        PostMessagesListScheduledRequest body = null;

        List<PostMessagesListScheduled200ResponseInner> response = api.postMessagesListScheduled(body);

        // TODO: test validations
    }
    
    /**
     * Parse mime document
     *
     * Parse the full MIME document for an email message, returning the content of the message broken into its constituent pieces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesParseTest() {
        PostMessagesParseRequest body = null;

        PostMessagesParse200Response response = api.postMessagesParse(body);

        // TODO: test validations
    }
    
    /**
     * Reschedule email
     *
     * Reschedules a scheduled email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesRescheduleTest() {
        PostMessagesRescheduleRequest body = null;

        List<PostMessagesListScheduled200ResponseInner> response = api.postMessagesReschedule(body);

        // TODO: test validations
    }
    
    /**
     * Search messages by date
     *
     * Search recently sent messages and optionally narrow by date range, tags, senders, and API keys. If no date range is specified, results within the last 7 days are returned. This method may be called up to 20 times per minute. If you need the data more often, you can use /messages/info.json to get the information for a single message, or webhooks to push activity to your own application for querying.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesSearchTest() {
        PostMessagesSearchRequest body = null;

        List<PostMessagesSearch200ResponseInner> response = api.postMessagesSearch(body);

        // TODO: test validations
    }
    
    /**
     * Search messages by hour
     *
     * Search the content of recently sent messages and return the aggregated hourly stats for matching messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesSearchTimeSeriesTest() {
        PostMessagesSearchTimeSeriesRequest body = null;

        List<PostMessagesSearchTimeSeries200ResponseInner> response = api.postMessagesSearchTimeSeries(body);

        // TODO: test validations
    }
    
    /**
     * Send new message
     *
     * Send a new transactional message through the Transactional API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesSendTest() {
        PostMessagesSendRequest body = null;

        List<PostMessagesSend200ResponseInner> response = api.postMessagesSend(body);

        // TODO: test validations
    }
    
    /**
     * Send mime document
     *
     * Take a raw MIME document for a message, and send it exactly as if it were sent through the Transactional API&#39;s SMTP servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesSendRawTest() {
        PostMessagesSendRawRequest body = null;

        Object response = api.postMessagesSendRaw(body);

        // TODO: test validations
    }
    
    /**
     * Send using message template
     *
     * Send a new transactional message through the Transactional API using a template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesSendTemplateTest() {
        PostMessagesSendTemplateRequest body = null;

        List<PostMessagesSendTemplate200ResponseInner> response = api.postMessagesSendTemplate(body);

        // TODO: test validations
    }
    
}
