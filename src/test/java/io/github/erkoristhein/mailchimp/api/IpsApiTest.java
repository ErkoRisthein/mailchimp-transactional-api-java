/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.api;

import io.github.erkoristhein.mailchimp.model.PostExportsListRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsCheckCustomDns200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsCheckCustomDnsRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsCreatePoolRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsDelete200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsDeletePool200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsDeletePoolRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsDeleteRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsInfo200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsInfoRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsList200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostIpsListPools200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostIpsPoolInfo200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsPoolInfoRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsProvision200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsProvisionRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsSetCustomDns200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsSetCustomDnsRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsSetPool200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsSetPoolRequest;
import io.github.erkoristhein.mailchimp.model.PostIpsStartWarmup200Response;
import io.github.erkoristhein.mailchimp.model.PostIpsStartWarmupRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IpsApi
 */
@Ignore
public class IpsApiTest {

    private final IpsApi api = new IpsApi();

    
    /**
     * Cancel ip warmup
     *
     * Cancels the warmup process for a dedicated IP.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsCancelWarmupTest() {
        PostIpsStartWarmupRequest body = null;

        PostIpsStartWarmup200Response response = api.postIpsCancelWarmup(body);

        // TODO: test validations
    }
    
    /**
     * Test custom dns
     *
     * Tests whether a domain name is valid for use as the custom reverse DNS for a dedicated IP.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsCheckCustomDnsTest() {
        PostIpsCheckCustomDnsRequest body = null;

        PostIpsCheckCustomDns200Response response = api.postIpsCheckCustomDns(body);

        // TODO: test validations
    }
    
    /**
     * Add ip pool
     *
     * Creates a pool and returns it. If a pool already exists with this name, no action will be performed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsCreatePoolTest() {
        PostIpsCreatePoolRequest body = null;

        PostIpsPoolInfo200Response response = api.postIpsCreatePool(body);

        // TODO: test validations
    }
    
    /**
     * Delete ip address
     *
     * Deletes a dedicated IP. This is permanent and cannot be undone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsDeleteTest() {
        PostIpsDeleteRequest body = null;

        PostIpsDelete200Response response = api.postIpsDelete(body);

        // TODO: test validations
    }
    
    /**
     * Delete ip pool
     *
     * Deletes a pool. A pool must be empty before you can delete it, and you cannot delete your default pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsDeletePoolTest() {
        PostIpsDeletePoolRequest body = null;

        PostIpsDeletePool200Response response = api.postIpsDeletePool(body);

        // TODO: test validations
    }
    
    /**
     * Get ip info
     *
     * Retrieves information about a single dedicated IP.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsInfoTest() {
        PostIpsInfoRequest body = null;

        PostIpsInfo200Response response = api.postIpsInfo(body);

        // TODO: test validations
    }
    
    /**
     * List ip addresses
     *
     * Lists your dedicated IPs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsListTest() {
        PostExportsListRequest body = null;

        List<PostIpsList200ResponseInner> response = api.postIpsList(body);

        // TODO: test validations
    }
    
    /**
     * List ip pools
     *
     * Lists your dedicated IP pools.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsListPoolsTest() {
        PostExportsListRequest body = null;

        List<PostIpsListPools200ResponseInner> response = api.postIpsListPools(body);

        // TODO: test validations
    }
    
    /**
     * Get ip pool info
     *
     * Describes a single dedicated IP pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsPoolInfoTest() {
        PostIpsPoolInfoRequest body = null;

        PostIpsPoolInfo200Response response = api.postIpsPoolInfo(body);

        // TODO: test validations
    }
    
    /**
     * Request additional ip
     *
     * Requests an additional dedicated IP for your account. Accounts may have one outstanding request at any time, and provisioning requests are processed within 24 hours.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsProvisionTest() {
        PostIpsProvisionRequest body = null;

        PostIpsProvision200Response response = api.postIpsProvision(body);

        // TODO: test validations
    }
    
    /**
     * Set custom dns
     *
     * Configures the custom DNS name for a dedicated IP.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsSetCustomDnsTest() {
        PostIpsSetCustomDnsRequest body = null;

        PostIpsSetCustomDns200Response response = api.postIpsSetCustomDns(body);

        // TODO: test validations
    }
    
    /**
     * Move ip to different pool
     *
     * Moves a dedicated IP to a different pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsSetPoolTest() {
        PostIpsSetPoolRequest body = null;

        PostIpsSetPool200Response response = api.postIpsSetPool(body);

        // TODO: test validations
    }
    
    /**
     * Start ip warmup
     *
     * Begins the warmup process for a dedicated IP. During the warmup process, the Transactional API will gradually increase the percentage of your mail that is sent over the warming-up IP, over a period of roughly 30 days. The rest of your mail will be sent over shared IPs or other dedicated IPs in the same pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postIpsStartWarmupTest() {
        PostIpsStartWarmupRequest body = null;

        PostIpsStartWarmup200Response response = api.postIpsStartWarmup(body);

        // TODO: test validations
    }
    
}
