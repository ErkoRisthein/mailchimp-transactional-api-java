/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.api;

import io.github.erkoristhein.mailchimp.model.PostSubaccountsAdd200Response;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsAddRequest;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsDelete200Response;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsDeleteRequest;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsInfo200Response;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsInfoRequest;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsList200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsListRequest;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsPause200Response;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsPauseRequest;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsResume200Response;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsResumeRequest;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsUpdate200Response;
import io.github.erkoristhein.mailchimp.model.PostSubaccountsUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubaccountsApi
 */
@Ignore
public class SubaccountsApiTest {

    private final SubaccountsApi api = new SubaccountsApi();

    
    /**
     * Add subaccount
     *
     * Add a new subaccount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsAddTest() {
        PostSubaccountsAddRequest body = null;

        PostSubaccountsAdd200Response response = api.postSubaccountsAdd(body);

        // TODO: test validations
    }
    
    /**
     * Delete subaccount
     *
     * Delete an existing subaccount. Any email related to the subaccount will be saved, but stats will be removed and any future sending calls to this subaccount will fail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsDeleteTest() {
        PostSubaccountsDeleteRequest body = null;

        PostSubaccountsDelete200Response response = api.postSubaccountsDelete(body);

        // TODO: test validations
    }
    
    /**
     * Get subaccount info
     *
     * Given the ID of an existing subaccount, return the data about it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsInfoTest() {
        PostSubaccountsInfoRequest body = null;

        PostSubaccountsInfo200Response response = api.postSubaccountsInfo(body);

        // TODO: test validations
    }
    
    /**
     * List subaccounts
     *
     * Get the list of subaccounts defined for the account, optionally filtered by a prefix.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsListTest() {
        PostSubaccountsListRequest body = null;

        List<PostSubaccountsList200ResponseInner> response = api.postSubaccountsList(body);

        // TODO: test validations
    }
    
    /**
     * Pause subaccount
     *
     * Pause a subaccount&#39;s sending. Any future emails delivered to this subaccount will be queued for a maximum of 3 days until the subaccount is resumed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsPauseTest() {
        PostSubaccountsPauseRequest body = null;

        PostSubaccountsPause200Response response = api.postSubaccountsPause(body);

        // TODO: test validations
    }
    
    /**
     * Resume subaccount
     *
     * Resume a paused subaccount&#39;s sending.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsResumeTest() {
        PostSubaccountsResumeRequest body = null;

        PostSubaccountsResume200Response response = api.postSubaccountsResume(body);

        // TODO: test validations
    }
    
    /**
     * Update subaccount
     *
     * Update an existing subaccount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubaccountsUpdateTest() {
        PostSubaccountsUpdateRequest body = null;

        PostSubaccountsUpdate200Response response = api.postSubaccountsUpdate(body);

        // TODO: test validations
    }
    
}
