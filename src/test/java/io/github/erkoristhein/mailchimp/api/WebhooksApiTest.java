/*
 * Mailchimp Transactional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.api;

import io.github.erkoristhein.mailchimp.model.PostExportsListRequest;
import io.github.erkoristhein.mailchimp.model.PostWebhooksAdd200Response;
import io.github.erkoristhein.mailchimp.model.PostWebhooksAddRequest;
import io.github.erkoristhein.mailchimp.model.PostWebhooksDelete200Response;
import io.github.erkoristhein.mailchimp.model.PostWebhooksInfo200Response;
import io.github.erkoristhein.mailchimp.model.PostWebhooksInfoRequest;
import io.github.erkoristhein.mailchimp.model.PostWebhooksList200ResponseInner;
import io.github.erkoristhein.mailchimp.model.PostWebhooksUpdate200Response;
import io.github.erkoristhein.mailchimp.model.PostWebhooksUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Ignore
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    
    /**
     * Add webhook
     *
     * Add a new webhook.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWebhooksAddTest() {
        PostWebhooksAddRequest body = null;

        PostWebhooksAdd200Response response = api.postWebhooksAdd(body);

        // TODO: test validations
    }
    
    /**
     * Delete webhook
     *
     * Delete an existing webhook.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWebhooksDeleteTest() {
        PostWebhooksInfoRequest body = null;

        PostWebhooksDelete200Response response = api.postWebhooksDelete(body);

        // TODO: test validations
    }
    
    /**
     * Get webhook info
     *
     * Given the ID of an existing webhook, return the data about it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWebhooksInfoTest() {
        PostWebhooksInfoRequest body = null;

        PostWebhooksInfo200Response response = api.postWebhooksInfo(body);

        // TODO: test validations
    }
    
    /**
     * List webhooks
     *
     * Get the list of all webhooks defined on the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWebhooksListTest() {
        PostExportsListRequest body = null;

        List<PostWebhooksList200ResponseInner> response = api.postWebhooksList(body);

        // TODO: test validations
    }
    
    /**
     * Update webhook
     *
     * Update an existing webhook.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWebhooksUpdateTest() {
        PostWebhooksUpdateRequest body = null;

        PostWebhooksUpdate200Response response = api.postWebhooksUpdate(body);

        // TODO: test validations
    }
    
}
